# .zshrc
#-----------------------------------------------------------------------------

# Oh my zsh
#-----------------------------------------------------------------------------
# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Theme
#-----------------------------------------------------------------------------

ZSH_THEME=../../.files/zsh/king

alias king='sudo zsh'

# TODO: If you are in the directory included in PATH, turn into a queen
# TODO: If you are in a git repository, turn into a bishop? Dropbox/Google drive/Skydrive Rook?
function chess { echo "\n   ♔  ♕  ♖  ♗  ♘  ♙    ♚  ♛  ♜  ♝  ♞  ♟\n" }

# Settings
#-----------------------------------------------------------------------------

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Plugins
#-----------------------------------------------------------------------------

plugins=(brew)

source $ZSH/oh-my-zsh.sh

# OS Detection
#-----------------------------------------------------------------------------
# Supported arguments: "windows", "osx", "linux"
function is_os {
  if [ -z "$OS" ]; then
    OS=$(uname -s)
    [ "$?" -eq 0 ] || return 0
  fi
  if [ $1 = "windows" ] && [ "$OS" = "Windows_NT" ]; then
    return 0
  elif [ $1 = "linux" ] && [ "$OS" = "Linux" ]; then
      return 0
  elif [ $1 = "osx" ] && [ "$OS" = "Darwin" ]; then
    return 0
  fi
  return 1
}

# Configure with: ~/.location
function is_location {
  if [ "`cat ~/.location | grep $1`" = $1 ]; then
    return 0
  fi
  return 1
}

# Create missing .location file if it doesn't exist
if [ ! -f ~/.location ]; then
  echo "home" > ~/.location
fi

# Path and Location Detection
#-----------------------------------------------------------------------------

# Print operating system
echo # Newline
echo -n "  OS:       "

# Bind for Windows
if is_os "windows"; then
  echo "Windows"
  export USER=$USERNAME                 # OSX already has this
  export PATH=$PATH
  export PATH=~/bin:$PATH
  export PATH=~/bin/windows:$PATH
  export EDITOR="emacs"

# Bind for OSX
elif is_os "osx"; then
  echo "OSX"
  # Brew requires /usr/local/bin and /usr/local/sbin to be ahead of /usr/bin
  export PATH=/usr/local/bin:$PATH
  export PATH=/usr/local/sbin:$PATH

  # Path for pkg-config
  export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

  # Path for qt
  export CMAKE_MODULE_PATH=/Users/em/Qt5.7.0/5.7/clang_64/

  # Path for node
  export NODE_PATH=/usr/local/lib/node_modules

  # Path for npm
  export PATH=/usr/local/share/npm/bin:$PATH

  # Path for cabal
  export PATH=~/.cabal/bin:$PATH

  # Todo: Fix path to be LOCATION based.
  export PATH=/usr/local/Cellar/git/1.7.8/bin:$PATH
  export PATH=/usr/local/share/python:$PATH
  export PATH=~/bin:$PATH
  export PATH=~/bin/osx:$PATH

  export EDITOR="sub -w"

  if [ -d $HOME/.rbenv ]; then
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
  fi

  # Paths for ansible
  export ANSIBLE_HOSTS="${HOME}/.ansible_hosts"
  export ANSIBLE_TRANSPORT="ssh"

  # Path for google app engine
  export PATH="$HOME/bin/google_appengine:$PATH"

  # Paths for EC2

  export JAVA_HOME="$(/usr/libexec/java_home)"
  export EC2_PRIVATE_KEY="$(/bin/ls "$HOME"/.ssh/ec2/pk-*.pem | /usr/bin/head -1)"
  export EC2_CERT="$(/bin/ls "$HOME"/.ssh/ec2/cert-*.pem | /usr/bin/head -1)"
  export EC2_HOME="/usr/local/Library/LinkedKegs/ec2-api-tools/jars"
  export EC2_AMITOOL_HOME="/usr/local/Library/LinkedKegs/ec2-ami-tools/jars"

# Bind for Linux
elif is_os "linux"; then
  echo "Linux"

  export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"

  export MANPATH="${HOME}/share/man:${HOME}/.local/share/man:$MANPATH"
  export EDITOR="emacs"

  export NODE_PATH="#{HOME}/.node_modules"
fi

# Bind for osx and linux
if is_os "osx" || is_os "linux"; then
  # Path for ansible
  export ANSIBLE_HOSTS="${HOME}/.ansible_hosts"
  export ANSIBLE_TRANSPORT="ssh"
fi

echo "  User:     $USER"

# Prompt
#-----------------------------------------------------------------------------

function git_branch {
   (echo -n "*"; git branch 2> /dev/null | sed -e '/^[^*]/d') | sed -e 's/\*\* \(.*\)/*\1/'
}

function heroku_account {
   (echo -n "^"; heroku accounts 2> /dev/null | sed -e '/^[^*]/d') | sed -e 's/\^\* \(.*\)/\^\1/'
}

function define_colors {
  local N=30
  local COLOR
  for COLOR in BLACK RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    export COLOR_${COLOR}="\033[0;${N}m"
    export COLOR_${COLOR}_LIGHT="\033[1;${N}m"
    export PROMPT_COLOR_${COLOR}="\[\033[0;${N}m\]"
    export PROMPT_COLOR_${COLOR}_LIGHT="\[\033[1;${N}m\]"
    N=$(($N + 1))
  done

  COLOR_NONE="\033[0m"
  COLOR_COMMENT=$COLOR_BLACK
  PROMPT_COLOR_NONE="\[${COLOR_NONE}\]"
  PROMPT_COLOR_GIT=$PROMPT_COLOR_GREEN
  PROMPT_COLOR_USER=$PROMPT_COLOR_CYAN
  PROMPT_COLOR_HOST=$PROMPT_COLOR_CYAN
  PROMPT_COLOR_PATH=$PROMPT_COLOR_YELLOW
  PROMPT_COLOR_HISTORY=$PROMPT_COLOR_RED
  PROMPT_COLOR_TIME=$PROMPT_COLOR_MAGENTA

  # TODO: Extend bold, underline to all colors
  COLOR_BOLD="\033[1m"
  PROMPT_COLOR_BOLD="\[${COLOR_BOLD}\]"

  COLOR_UNDERLINE="\033[4m"
  PROMPT_COLOR_UNDERLINE="\[${COLOR_UNDERLINE}\]"
}

alias print_colors="define_colors; echo -e \"${COLOR_NONE}COLOR_NONE\";echo -e \"${COLOR_WHITE}COLOR_WHITE\t${COLOR_WHITE_LIGHT}COLOR_WHITE_LIGHT\";echo -e \"${COLOR_BLUE}COLOR_BLUE\t${COLOR_BLUE_LIGHT}COLOR_BLUE_LIGHT\";echo -e \"${COLOR_GREEN}COLOR_GREEN\t${COLOR_GREEN_LIGHT}COLOR_GREEN_LIGHT\";echo -e \"${COLOR_CYAN}COLOR_CYAN\t${COLOR_CYAN_LIGHT}COLOR_LIGHT_CYAN\";echo -e \"${COLOR_RED}COLOR_RED\t${COLOR_RED_LIGHT}COLOR_RED_LIGHT\";echo -e \"${COLOR_MAGENTA}COLOR_MAGENTA\t${COLOR_MAGENTA_LIGHT}COLOR_MAGENTA_LIGHT\";echo -e \"${COLOR_YELLOW}COLOR_YELLOW\t${COLOR_YELLOW_LIGHT}COLOR_YELLOW_LIGHT\";echo -e \"${COLOR_BLACK}COLOR_BLACK\t${COLOR_BLACK_LIGHT}COLOR_BLACK_LIGHT\""11

# Terminal aliases
#-----------------------------------------------------------------------------

# SOLARIZED        TERMCOL     XTERM/HEX     HEX       16/8   RGB           HSB           L*A*B        LIGHT          DARK
# --------------   ---------   -----------   -------   ----   -----------   -----------   ----------   ------------   ------------
# base03           brblack     234 #1c1c1c   #002b36    8/4     0  43  54   193 100  21   15 -12 -12   ---            bg
# base02           black       235 #262626   #073642    0/4     7  54  66   192  90  26   20 -12 -12   ---            bg highlight
# base01           brgreen     240 #585858   #586e75   10/7    88 110 117   194  25  46   45 -07 -07   emphasis       comment
# base00           bryellow    241 #626262   #657b83   11/7   101 123 131   195  23  51   50 -07 -07   text           ---
# base0            brblue      244 #808080   #839496   12/6   131 148 150   186  13  59   60 -06 -03   ---            text
# base1            brcyan      245 #8a8a8a   #93a1a1   14/4   147 161 161   180   9  63   65 -05 -02   comment        emphasis
# base2            white       254 #e4e4e4   #eee8d5    7/7   238 232 213    44  11  93   92 -00  10   bg highlight   ---
# base3            brwhite     230 #ffffd7   #fdf6e3   15/7   253 246 227    44  10  99   97  00  10   bg             ---
# yellow           yellow      136 #af8700   #b58900    3/3   181 137   0    45 100  71   60  10  65   accent         accent
# orange           brred       166 #d75f00   #cb4b16    9/3   203  75  22    18  89  80   50  50  55   accent         accent
# red              red         160 #d70000   #dc322f    1/1   220  50  47     1  79  86   50  65  45   accent         accent
# magenta          magenta     125 #af005f   #d33682    5/5   211  54 130   331  74  83   50  65 -05   accent         accent
# violet           brmagenta    61 #5f5faf   #6c71c4   13/5   108 113 196   237  45  77   50  15 -45   accent         accent
# blue             blue         33 #0087ff   #268bd2    4/4    38 139 210   205  82  82   55 -10 -45   accent         accent
# cyan             cyan         37 #00afaf   #2aa198    6/6    42 161 152   175  74  63   60 -35 -05   accent         accent
# green            green        64 #5f8700   #859900    2/2   133 153   0    68 100  60   60 -20  65   accent         accent
# --------------   ---------   -----------   -------   ----   -----------   -----------   ----------   ------------   ------------
# PRISMIZED        TERMCOL     XTERM/HEX     HEX       16/8   RGB           HSB           L*A*B        LIGHT          DARK
# --------------   ---------   -----------   -------   ----   -----------   -----------   ----------   ------------   ------------
# darkbasered      n/a                                         27   0   3                              ---            bg
# darkbaseorange   n/a                                         30  16   1                              ---            bg
# darkbaseyellow   n/a                                         30  30   0                              ---            bg
# darkbasegreen    n/a                                         12  26  14                              ---            bg
# darkbasecyan     n/a                                          0  28  29                              ---            bg
# darkbasepurple   n/a                                         20  12  29                              ---            bg

# Aliases
#-----------------------------------------------------------------------------

if is_os "osx"; then

  function terminal_theme {
    TERMINAL_THEME=$1; if [ -z "$TERMINAL_THEME" ]; then TERMINAL_THEME="SolarizedDark"; fi
    osascript -e "tell application \"Terminal\" to set current settings of window 1 to settings set \"$TERMINAL_THEME\""
  }

  function light { terminal_theme "SolarizedLight"; }
  function dark { terminal_theme "SolarizedDark"; }
  function blue { dark; }
  function white { light; }
  function red { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {6885, 0, 765}"; }
  function green { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {3060, 6630, 3570}"; }
  function purple { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {5100, 3060, 7395}"; }
  function cyan { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {0, 7140, 7395}"; }
  function orange { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {7650, 4080, 255}"; }
  function yellow { dark; osascript -e "tell application \"Terminal\" to set background color of front window to {7650, 7650, 0}"; }

  # Run -- Echo your command as it is run
  function comment { echo -e "${COLOR_COMMENT}[$@]${COLOR_NONE}"; }
  function run { comment $@; $@; }
  function run_color { local C1=$1; local C2=$2; shift; shift; comment $@; $C1; $@; local ERR=$?; $C2; return $ERR}

  # Color terminal during run
  # function runl { light; run $@; local E=$?; dark; return $E }
  function runl { run_color light dark "$@" }
  function rund { run_color dark light "$@" }
  function runr { run_color red dark "$@" }
  function rung { run_color green dark "$@" }
  function runp { run_color purple dark "$@" }
  function runy { run_color yellow dark "$@" }
  function runo { run_color orange dark "$@" }
  function runc { run_color cyan dark "$@" }

  # Random
  function random { openssl rand -hex 8 | pbcopy; echo "Copy successful."}

  # Beep
  function beep { echo -n ''; }

  # Growl
  function growl { growlnotify -m $@; }
  function grun { $@; growlnotify -t "Completed" -m "$@"; }
  function grunl { light; grun $@; dark; }
  function grund { dark; grun $@; light; }
  function grunr { red; grun $@; dark; }
  function grung { green; grun $@; dark; }
  function grunp { purple; grun $@; dark; }
  function grunc { cyan; grun $@; dark; }
  function gruno { orange; grun $@; dark; }
  function gruny { yellow; grun $@; dark; }

  alias xcode="open -a XCode $@"

else

  function beep { echo -n ''; }
  function run { $@; }
  function runl { $@; }
  function rund { $@; }
  function runr { $@; }
  function rung { $@; }
  function runp { $@; }
  function runy { $@; }
  function runo { $@; }
  function runc { $@; }
  function growl { $@; }
  function grunl { $@; }
  function grunr { $@; }
  function grung { $@; }
  function grunp { $@; }
  function grunc { $@; }
  function gruno { $@; }
  function gruny { $@; }

fi

# One-time Aliases
#-----------------------------------------------------------------------------

if is_os "osx"; then
  function onetime_setup {
    # Ensure dropbox is /d
    run ln -s $HOME/Dropbox/ $HOME/d

    # Add .gitconfig, .bash_profile to path
    run ln -s $HOME/.files/.gitconfig $HOME/.gitconfig
    run ln -s $HOME/.files/.bash_profile $HOME/.bash_profile

    # Add sublime to commandline path
    run ln -s '/Applications/Sublime Text 3.app/Contents/SharedSupport/bin/subl' /usr/local/bin/sub

    # Hotlink sublime user settings to dropbox
    run rm -rf "$HOME/Library/Application Support/Sublime Text 3/Packages/User"; ln -s "$HOME/d/env/sublime/Packages/User" "$HOME/Library/Application Support/Sublime Text 3/Packages/User"
  }
fi

# Config Aliases
#-----------------------------------------------------------------------------

[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

alias p="${EDITOR} ~/.files/osx/osx.bash ~/.files/links.bash ~/.files/git/gitconfig ~/.files/zsh/zshrc"

alias plan="${EDITOR} ~/.plan"
alias notes="${EDITOR} ~/.notes"

alias reload="pushd ${HOME}/.files > /dev/null; git pull; source ${HOME}/.files/.zshrc; popd > /dev/null"

#-----------------------------------------------------------------------------
# ls colors
#-----------------------------------------------------------------------------
export CLICOLOR=1
export LSCOLORS=exfxcxdxbxegedabagacad
export LS_OPTIONS='--color=auto'

[ "$TERM" = "xterm" ] && TERM="xterm-256color"

if is_os 'osx'; then
  eval `gdircolors ~/.dircolors`
  # TODO: Detect if gls exists before binding these
  alias ls='run gls --color -F $@'      # Compact view
  alias ll='run gls --color -AF $@'     # Compact view, showing hidden
  alias la='run gls --color -lhAF $@'   # Full view, showing hidden
  alias l.='gls --color -adF .*'        # Show just .files
  alias ls0='ls -Gp'
  alias ls1='ls -GF'
elif is_os 'linux'; then
  eval `dircolors ~/.dircolors`
  alias ls='run ls --color -F $@'       # Compact view
  alias ll='run ls --color -AF $@'      # Compact view, showing hidden
  alias la='run ls --color -lhAF $@'    # Full view, showing hidden
fi

# Navigation Alaises
#-----------------------------------------------------------------------------

alias hlist='history $@'
alias hclear='history -c'             # history clear
alias hgrep='history | grep -i $@'   # history grep

alias asdf='clear;'
alias cl='clear; ls -lhG $@'
alias cla='clear; ls -lhAG $@'

alias s='cd ..'
alias de='cd ~/dev'
alias ma='cd ~/dev/mason'

alias diff='run git difftool --extcmd=/usr/bin/opendiff $@'
alias diffs='run git difftool --staged --extcmd=/usr/bin/opendiff $@'

# Run, change color, and echo
function ssh {
  runr /usr/bin/ssh "$@"
}

# Info Alaises
#-----------------------------------------------------------------------------

alias psls='ps aux $@'             # List running processes
alias psg='ps aux | grep $@'      # Search running processes
alias psgi='ps aux | grep -i $@'  # Case insensitive search

# Git aliases
#-----------------------------------------------------------------------------

alias m='git checkout master'     # Change to master branch\
alias b='git checkout -'          # Toggle to last branch

alias g='git $@'
alias cdg='run git checkout $@'

# Git core information

alias gb='run git branch'
# alias_echo 'gs' 'git status'
alias gs='run git status'
alias ts='run tig status'
alias tl='run tig'
function gl {
  comment "git lg | head -n ${1:-20}"
  git lg | head -n ${1:-20}
}

alias glm='git lg | grep Evan'

alias gg='echo -e "\n--------------------------------- Git Branch -----------------------------------\n";git branch;echo -e "\n--------------------------------- Git Status -----------------------------------\n";git status;echo -e "\n--------------------------------- Git Log --------------------------------------\n";git lg | head -n 12'

alias ggm='echo -e "\n--------------------------------- Git Branch -----------------------------------\n";git branch;echo -e "\n--------------------------------- Git Status -----------------------------------\n";git status;echo -e "\n--------------------------------- Git Log ------------------------------------- \n";git lg | grep Evan | head -n 12 '

alias gh='run git lg | head -n 12'

alias gd='run git diff'
alias gds='run git diff --staged'
alias gdc='run git diff --cached'
alias gdt='git symbolic-ref -q HEAD | xargs git for-each-ref --format="%(upstream:short)" | xargs -o git diff'

# Git workflow


# Git core manipulation

alias ga='run git add'
alias gap='run git add -p'

alias gf='run git fetch'
alias gp='run git pull'
alias gpr='run git pull --rebase'
alias gprs='run git pull --rebase && run git submodule update --init --recursive'

alias gy='run git yank'

alias gc='run git commit'
alias gca='run git commit --amend $@'
alias gcm='run git commit -m "$@"'

alias gr='run git remote $@'
alias grv='run git remote -v $@'
alias gra='run git remote add $@'

alias gch='run git checkout'
alias gchp='run git checkout -p'

alias gpush='run git stash'
alias gpop='run git stash pop'


alias grm='run git rebase master'
alias grom='run git rebase origin/master'
alias grim='run git rebase -i origin/master'
alias gromf='gf && grom'
alias gros='run git rebase origin/staging'
alias gris='run git rebase -i origin/staging'

alias gmt='run git mergetool'

# Rebase interactive to the origin/branch you are currently upstream to.
alias grit='git symbolic-ref -q HEAD | xargs git for-each-ref --format="%(upstream:short)" | xargs -o git rebase -i'
alias glt='git symbolic-ref -q HEAD | xargs git for-each-ref --format="%(upstream:short)" | xargs -o git lg HEAD'

alias gack='run git add . && git commit -m "f"'
alias grimace='run git add . && git commit -m "f" && git rebase -i master'

# To remember
alias git_monthly='git log --author evanmoran --format="%ci" | cut -f1-2 -d- | uniq -c | tail -r'
alias git_reset_head='run git reset -p HEAD'
alias git_deleted='run git ls-files -d'
alias git_restore_deleted='run git ls-files -d | xargs git checkout --'
alias git_undo_cherrypick='run git reset --merge ORIG_HEAD'
alias git_remember_merge_changes='run git rerere'
alias git_rebase_top_commit='run git rebase -i HEAD~'
alias git_rebase_top_4_commits='run git rebase -i HEAD~4'
alias git_list_remote_branches='run git br -r'
alias git_delete_remote_branch='echo "git push <remotename> --delete <branchname>"'
alias git_show_file_stats_between_branches='git '
# Visual diffs in OSX using built in opendiff


# Python aliases
#-----------------------------------------------------------------------------
alias pt='py.test $@'

# Node and NPM aliases
#-----------------------------------------------------------------------------

alias no='runp node-dev src/app.js'
alias np='sub package.json'

alias nu='npm update'
alias nbuild='npm run build'
alias nb='npm run build'
alias nrun='npm run run'
alias nr='npm run run'
alias ncr='npm run clean && npm run build && npm run run'
alias ncb='npm run clean && npm run build'
alias nt='npm test'
alias fs='runl foreman start -p 3000 $@'
alias fl='run cat Procfile'
alias fl='sub Procfile'

# Cake aliases
#-----------------------------------------------------------------------------

alias c='cake $@'

# Mongo aliases
#-----------------------------------------------------------------------------

alias mo='runl mocha $@'
alias mow='runl mocha --watch $@'
alias t='mocha $@'
alias tp='mocha-phantomjs $@'
alias tw='mocha --reporter min --watch'

# Mongo aliases
#-----------------------------------------------------------------------------

alias db2='runy mongo localhost:4000/database'

# Ansible aliases
#-----------------------------------------------------------------------------

alias a="${EDITOR} ${HOME}/.ansible_hosts"
alias an='run ansible $@'
alias anp='run ansible-playbook $@'
alias anu="run ansible $@ -u ubuntu"

alias framdpull='run ansible-playbook ~/framd/ansible/framd.all.yml -t pull $@'
alias framdinstall='run ansible-playbook ~/framd/ansible/framd.all.yml -t install $@'
alias framddbinstall='run ansible-playbook ~/framd/ansible/framd.db.yml -t install $@'
alias framdwebinstall='run ansible-playbook ~/framd/ansible/framd.web.yml -t install $@'

# EC2 aliases
#-----------------------------------------------------------------------------
# EC2FILTER = "awk -v OFS='    ' -F'\t' '{print $2, $3, $6, $4}'"

EC2FILTER="grep INSTANCE | awk -v OFS='    ' -F'\\\\t' '{print \$2, \$3, \$6, \$4}'"
alias els="echo '[ec2-describe-instances]'; ec2-describe-instances | $EC2FILTER"
alias els1="echo '[ec2-describe-instances --region us-east-1]'; ec2-describe-instances --region us-east-1 | $EC2FILTER"
alias els2="echo '[ec2-describe-instances --region us-east-2]'; ec2-describe-instances --region us-east-2 | $EC2FILTER"
alias els3="echo '[ec2-describe-instances --region us-east-3]'; ec2-describe-instances --region us-east-3 | $EC2FILTER"
alias els1w="echo '[ec2-describe-instances --region us-west-1]'; ec2-describe-instances --region us-west-1 | $EC2FILTER"
alias els2w="echo '[ec2-describe-instances --region us-west-2]'; ec2-describe-instances --region us-west-2 | $EC2FILTER"
alias els3w="echo '[ec2-describe-instances --region us-west-3]'; ec2-describe-instances --region us-west-3 | $EC2FILTER"
alias ekeys="run ec2-describe-keypairs"
alias erm="run ec2-terminate-instances $@"
alias estop="run ec2-stop-instances $@"
alias estart="run ec2-start-instances $@"
alias erun='run ec2-run-instances ami-137bcf7a -g sg-22f5824a -k evan_sphinx --instance-type t1.micro --region us-east-1 $@'
alias ermall='for i in `ec2din | grep running | cut -f2`; do ec2kill $i; done'

# Heroku aliases
#-----------------------------------------------------------------------------

alias h='run heroku $@'

alias hc='run heroku config $@'
alias hca='run heroku config:add $@'
alias hcr='run heroku config:remove $@'

alias hk='run heroku keys $@'
alias hka='run heroku keys:add $@'
alias hkr='run heroku keys:remove $@'

alias hl='run heroku logs $@'
alias hlt='run heroku logs --tail $@'
function hln {
  run heroku logs -n ${1:-20}
}
#alias hln='run heroku logs -n $@ 5'

alias ha='run heroku accounts'
alias has='run heroku accounts:set $@'

# Rails aliases
#-----------------------------------------------------------------------------

alias rtest='growl rake'
alias rmig='growl runl rake db:migrate'
alias rmigtest='growl runl rake db:migrate RAILS_ENV=test'
alias roll='growl run rake db:rollback'
alias rsd='runl rails server --debugger'
alias rs='run rails server'

# OPS Aliases
#-----------------------------------------------------------------------------
alias digs='dig $@ +nostats +nocomments +nocmd'


# Elixir aliases
#-----------------------------------------------------------------------------
alias e='elixir $@'

# Unsorted
#-----------------------------------------------------------------------------

alias pg='run ps axw | grep -i'
alias plg='run port list | grep -i'

# Location aliases
#-----------------------------------------------------------------------------
# Edit ~/.location to configure

echo -n "  Aliases: "

# Home Aliases
#-----------------------------------------------------------------------------

function pidOf {
  ps aux | grep "$1" | grep -v grep | tail -n 1 | awk '{ print $2; }'
}

if is_location "home"; then
  echo -n " @Home"

  # Drives
  alias d='cd ~/d/ $@'
  alias dd='cd ~/d/dev/$@'
  alias f='cd ~/d/dev/face/$@'
  alias fu='cd ~/d/leaguefu/$@'
  alias z='cd ~/zillow/$@'
  alias fr='cd ~/framd/$@'
  alias frw='cd ~/framd/web/$@'
  alias lf='cd ~/leaguefu/$@'
  alias lfr='cd ~/leaguefu/rip/$@'
  alias ggg='cd ~/gg/$@'
  alias sm='cd ~/framd/lib/smite/$@'
  alias ojd='cd ~/oj/$@'
  alias db='green; (cd ~/framd/db; cake db) &; sleep 0.3; DB_PID=`pidOf "mongod --config config/development.conf"`; less +F ~/framd/db/logs/db-development.log; kill $DB_PID; blue'
  alias smdb='cd ~/framd/lib/smite-db-mongoose/$@'
  alias smd='cd ~/framd/lib/smite/demo/$@'
  alias smt='cd ~/framd/lib/smite/test/$@'
  alias smc='cd ~/framd/lib/smite/lib/smite-client/$@'
  alias act='cd ~/framd/lib/act/$@'
  alias actw='(cd ~/framd/lib/act; runy cake build:js:watch)'
  alias frd='cd ~/framd/db/$@'
  alias frt='cd ~/framd/web/test/$@'
  alias frs='cd ~/framd/web/src/$@'
  alias frp='cd ~/framd/prototype/$@'
  alias fw='cd ~/framd-web-server/$@'
  alias fa='cd ~/framd-api-server/$@'

# Work Aliases
#-----------------------------------------------------------------------------

elif is_location "work"; then
  echo -n " @Work"

# Server Aliases
#-----------------------------------------------------------------------------

elif is_location "server"; then
  echo -n " @Server"

else
  echo -n " @Unknown (no aliases bound)"
fi

# End
#-----------------------------------------------------------------------------

# Two newlines
echo
echo
